@*


<div class="advanced-search mt-3">
    <div class="row g-3">
        <div class="col-6">
            <div class="form-group position-relative">
                <label for="dateRange" class="date-range-label">Ngày tạo</label>
                <div class="input-group">
                    <input type="text" class="form-control date-range-input" id="dateRange" readonly>
                    <button class="btn btn-outline-secondary" type="button" id="dateRangeBtn">
                        <i class="fas fa-calendar-week me-1"></i> Tùy chỉnh
                    </button>
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="form-group position-relative">
                <label for="dateRange" class="date-range-label">Trạng thái</label>
                <div class="input-group">
                    <select class="form-control date-range-input">
                        <option selected value="">--Tất cả--</option>
                    </select>

                </div>
            </div>
        </div>
         <div class="col-6">
            <div class="form-group position-relative">
                <label for="dateRange" class="date-range-label">Trạng thái thanh toán</label>
                <div class="input-group">
                    <select class="form-control date-range-input">
                        <option selected value="">--Tất cả--</option>
                    </select>

                </div>
            </div>
        </div>
           <div class="col-6">
            <div class="form-group position-relative">
                <label for="dateRange" class="date-range-label">Hình thức thanh toán</label>
                <div class="input-group">
                    <select class="form-control date-range-input">
                        <option selected value="">--Tất cả--</option>
                    </select>

                </div>
            </div>
        </div>

    </div>
</div>
<!-- Date Range Modal -->
<div class="modal fade" id="dateRangeModal" tabindex="-1">
    <div class="modal-dialog date-range-modal">
        <div class="modal-content">
            <div class="modal-body">
                <div class="selected-range" id="selectedRange"></div>
                <div class="date-range-buttons">
                    <button class="btn btn-outline-primary" data-range="today">Hôm nay</button>
                    <button class="btn btn-outline-secondary" data-range="yesterday">Hôm qua</button>
                    <button class="btn btn-outline-secondary" data-range="thisWeek">Trong tuần</button>
                    <button class="btn btn-outline-secondary" data-range="last7Days">7 ngày qua</button>
                    <button class="btn btn-outline-secondary" data-range="lastWeek">Tuần trước</button>
                    <button class="btn btn-outline-secondary" data-range="thisMonth">Trong tháng</button>
                    <button class="btn btn-outline-secondary" data-range="lastMonth">Tháng trước</button>
                    <button class="btn btn-outline-secondary" data-range="last30Days">30 ngày qua</button>
                    <button class="btn btn-outline-secondary" data-range="thisQuarter">Trong quý</button>
                    <button class="btn btn-outline-secondary" data-range="lastQuarter">Quý trước</button>
                    <button class="btn btn-outline-secondary" data-range="thisYear">Trong năm</button>
                    <button class="btn btn-outline-secondary" data-range="lastYear">Năm trước</button>
                </div>
                <button class="btn btn-outline-secondary mt-3 w-100" id="customRangeBtn">Tùy chỉnh</button>

                <div id="customDatePicker" class="mt-3" style="display: none;">
                    <input type="text" id="customDateRange" class="form-control" placeholder="Chọn khoảng thời gian">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="applyDateRange">Áp dụng</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/vn.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const dateRangeInput = document.getElementById('dateRange');
        const dateRangeBtn = document.getElementById('dateRangeBtn');
        const dateRangeModal = new bootstrap.Modal(document.getElementById('dateRangeModal'));
        const customRangeBtn = document.getElementById('customRangeBtn');
        const customDatePicker = document.getElementById('customDatePicker');
        const applyDateRangeBtn = document.getElementById('applyDateRange');
        const selectedRangeElement = document.getElementById('selectedRange');

        let startDate, endDate;

        // Initialize Flatpickr for the main date range input
        const mainDatePicker = flatpickr(dateRangeInput, {
            mode: "range",
            dateFormat: "d/m/Y",
            locale: "vn",
            defaultDate: [new Date(), new Date()]
        });

        // Initialize Flatpickr for the custom date range picker
        const customDateRangePicker = flatpickr("#customDateRange", {
            mode: "range",
            dateFormat: "d/m/Y",
            locale: "vn",
            onChange: function (selectedDates) {
                if (selectedDates.length === 2) {
                    startDate = selectedDates[0];
                    endDate = selectedDates[1];
                    updateSelectedRange();
                }
            }
        });

        dateRangeBtn.addEventListener('click', () => dateRangeModal.show());

        customRangeBtn.addEventListener('click', () => {
            customDatePicker.style.display = 'block';
        });

        // Handle predefined date range buttons
        document.querySelectorAll('.date-range-buttons button').forEach(button => {
            button.addEventListener('click', () => {
                const range = button.getAttribute('data-range');
                const [start, end] = calculateDateRange(range);
                startDate = start;
                endDate = end;
                updateDateRangeInput();
                updateSelectedRange();
            });
        });

        applyDateRangeBtn.addEventListener('click', () => {
            updateDateRangeInput();
            dateRangeModal.hide();
        });

        function calculateDateRange(range) {
            const today = new Date();
            let start = new Date(today);
            let end = new Date(today);

            switch (range) {
                case 'today':
                    break;
                case 'yesterday':
                    start.setDate(today.getDate() - 1);
                    end = new Date(start);
                    break;
                case 'thisWeek':
                    start.setDate(today.getDate() - today.getDay());
                    break;
                case 'last7Days':
                    start.setDate(today.getDate() - 6);
                    break;
                case 'lastWeek':
                    start.setDate(today.getDate() - today.getDay() - 7);
                    end = new Date(start);
                    end.setDate(start.getDate() + 6);
                    break;
                case 'thisMonth':
                    start.setDate(1);
                    break;
                case 'lastMonth':
                    start.setMonth(today.getMonth() - 1);
                    start.setDate(1);
                    end = new Date(today.getFullYear(), today.getMonth(), 0);
                    break;
                case 'last30Days':
                    start.setDate(today.getDate() - 29);
                    break;
                case 'thisQuarter':
                    const quarterMonth = Math.floor(today.getMonth() / 3) * 3;
                    start = new Date(today.getFullYear(), quarterMonth, 1);
                    end = new Date(today.getFullYear(), quarterMonth + 3, 0);
                    break;
                case 'lastQuarter':
                    const lastQuarterMonth = Math.floor((today.getMonth() - 3) / 3) * 3;
                    start = new Date(today.getFullYear(), lastQuarterMonth, 1);
                    end = new Date(today.getFullYear(), lastQuarterMonth + 3, 0);
                    break;
                case 'thisYear':
                    start = new Date(today.getFullYear(), 0, 1);
                    break;
                case 'lastYear':
                    start = new Date(today.getFullYear() - 1, 0, 1);
                    end = new Date(today.getFullYear() - 1, 11, 31);
                    break;
            }

            return [start, end];
        }

        function updateDateRangeInput() {
            if (startDate && endDate) {
                mainDatePicker.setDate([startDate, endDate]);
            }
        }

        function updateSelectedRange() {
            if (startDate && endDate) {
                const formattedStart = formatDate(startDate);
                const formattedEnd = formatDate(endDate);
                selectedRangeElement.textContent = `${formattedStart} - ${formattedEnd}`;
                dateRangeInput.value = `${formattedStart} - ${formattedEnd}`;
            }
        }

        function formatDate(date) {
            return date.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric' });
        }

        // Initialize with current date
        startDate = new Date();
        endDate = new Date();
        updateSelectedRange();
    });
</script>
*@