// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PingMeChat.CMS.EntityFrameworkCore.EntityFrameworkCore;

#nullable disable

namespace PingMeChat.CMS.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240910102722_initial-project")]
    partial class initialproject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTable", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("BidaTableStatus")
                        .HasColumnType("integer");

                    b.Property<string>("BidaTableTypeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderParrentId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BidaTableTypeId");

                    b.ToTable("BidaTables");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTableSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BidaTableId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BidaTableId");

                    b.ToTable("BidaTableSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTableType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BidaTableTypes");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.DailyReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("NetRevenue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<decimal>("ProfitRate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalCustomers")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalDiscount")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<decimal>("TotalProfit")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<decimal>("TotalRefund")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<decimal>("TotalRevenue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DailyReports");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.InventoryExport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InventoryDetailsExports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryExports");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.InventoryImport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InventoryDetailsImports")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryImports");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BidaTableAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BidaTableCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CancelContent")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParrentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("StaffName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmountAllOrder")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.OrderHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("BidaTableAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BidaTableCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CancelContent")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("ParrentId")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<string>("StaffName")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Tax")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmountAllOrder")
                        .HasColumnType("numeric");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.ServiceSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BidaTableSessionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BidaTableSessionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ServiceSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Group", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsDataMigration")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("OrgId")
                        .HasColumnType("numeric(4,0)");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.GroupRole", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("GroupId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("GroupRoles");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.GroupUser", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .HasColumnType("text");

                    b.HasKey("GroupId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Media", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvatar")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Access")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("MenuType")
                        .HasColumnType("boolean");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = "31feb02e-9c05-4930-a914-0af953707dfd",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(424),
                            Icon = "fa fa-home",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            SortOrder = 1,
                            Title = "Bảng điều khiển",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(433),
                            Url = "/home"
                        },
                        new
                        {
                            Id = "fa6f5f76-2266-4f57-8962-258fc43619dd",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(474),
                            Icon = "fas fa-list-ul",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 2,
                            Title = "Danh mục",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(474),
                            Url = ""
                        },
                        new
                        {
                            Id = "928c2a06-0b95-45b2-8850-24452b13d82a",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(479),
                            Icon = "fas fa-table",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "fa6f5f76-2266-4f57-8962-258fc43619dd",
                            SortOrder = 3,
                            Title = "Loại bàn bida",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(479),
                            Url = "/bidatabletype"
                        },
                        new
                        {
                            Id = "5ae1d36a-df86-4ebf-a51f-1b33922aa633",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(483),
                            Icon = "fas fa-bowling-ball",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "fa6f5f76-2266-4f57-8962-258fc43619dd",
                            SortOrder = 4,
                            Title = "Bàn bida",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(483),
                            Url = "/bidatable"
                        },
                        new
                        {
                            Id = "cfcfa81f-53f9-4382-82a3-d753aa88be3f",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(487),
                            Icon = "fas fa-shopping-cart",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 5,
                            Title = "Bán hàng",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(487),
                            Url = ""
                        },
                        new
                        {
                            Id = "384c16a4-d389-4fea-b554-e702a333cf60",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(490),
                            Icon = "fab fa-first-order-alt",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "cfcfa81f-53f9-4382-82a3-d753aa88be3f",
                            SortOrder = 6,
                            Title = "Hóa đơn",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(491),
                            Url = "/order"
                        },
                        new
                        {
                            Id = "bad6c610-681c-47d4-aec0-6551aa308485",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(494),
                            Icon = "fas fa-people-arrows",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 7,
                            Title = "Đối tác",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(495),
                            Url = ""
                        },
                        new
                        {
                            Id = "336ec1d7-c59b-4c83-a919-53d29b6c003a",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(497),
                            Icon = "fas fa-user-friends",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "bad6c610-681c-47d4-aec0-6551aa308485",
                            SortOrder = 8,
                            Title = "Khách hàng",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(498),
                            Url = "/customer"
                        },
                        new
                        {
                            Id = "ac8f8e58-6e25-4126-aec8-b491e71155da",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(508),
                            Icon = "fab fa-servicestack",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 9,
                            Title = "Sản phẩm, dịch vụ",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(508),
                            Url = ""
                        },
                        new
                        {
                            Id = "db942e9c-d34f-4be1-ad5d-a4e1b105f8b9",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(511),
                            Icon = "fab fa-product-hunt",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "ac8f8e58-6e25-4126-aec8-b491e71155da",
                            SortOrder = 10,
                            Title = "Sản phẩm",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(512),
                            Url = "/product"
                        },
                        new
                        {
                            Id = "f0e8c848-8f6d-4a7b-9b8e-7c7e9f11a7f9",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(515),
                            Icon = "fas fa-box",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 11,
                            Title = "Quản lý kho",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(515),
                            Url = ""
                        },
                        new
                        {
                            Id = "a4e8a6f2-9c3d-4e2b-8f1a-5c5e6b7d8e9f",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(518),
                            Icon = "fas fa-warehouse",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "f0e8c848-8f6d-4a7b-9b8e-7c7e9f11a7f9",
                            SortOrder = 12,
                            Title = "Tồn kho",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(519),
                            Url = "/inventory"
                        },
                        new
                        {
                            Id = "b2c7d8e9-f0a1-4b2c-3d4e-5f6g7h8i9j0k",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(522),
                            Icon = "fas fa-truck-loading",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "f0e8c848-8f6d-4a7b-9b8e-7c7e9f11a7f9",
                            SortOrder = 13,
                            Title = "Nhập kho",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(522),
                            Url = "/inventoryimport"
                        },
                        new
                        {
                            Id = "c3d4e5f6-g7h8-4i9j-0k1l-2m3n4o5p6q7r",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(526),
                            Icon = "fas fa-truck",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "f0e8c848-8f6d-4a7b-9b8e-7c7e9f11a7f9",
                            SortOrder = 14,
                            Title = "Xuất kho",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(526),
                            Url = "/inventoryexport"
                        },
                        new
                        {
                            Id = "d4e5f6g7-h8i9-4j0k-1l2m-3n4o5p6q7r8s",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(529),
                            Icon = "fas fa-chart-bar",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            SortOrder = 15,
                            Title = "Báo cáo",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(530),
                            Url = "/report"
                        },
                        new
                        {
                            Id = "e5f6g7h8-i9j0-4k1l-2m3n-4o5p6q7r8s9t",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(533),
                            Icon = "fa fa-id-card",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = true,
                            SortOrder = 16,
                            Title = "Quản trị",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(533),
                            Url = ""
                        },
                        new
                        {
                            Id = "f6g7h8i9-j0k1-4l2m-3n4o-5p6q7r8s9t0u",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(558),
                            Icon = "fas fa-user",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "e5f6g7h8-i9j0-4k1l-2m3n-4o5p6q7r8s9t",
                            SortOrder = 17,
                            Title = "Tài khoản",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(560),
                            Url = "/user"
                        },
                        new
                        {
                            Id = "g7h8i9j0-k1l2-4m3n-4o5p-6q7r8s9t0u1v",
                            CreatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(564),
                            Icon = "fas fa-user-tag",
                            IsActive = true,
                            IsDeleted = false,
                            MenuType = false,
                            ParentId = "e5f6g7h8-i9j0-4k1l-2m3n-4o5p6q7r8s9t",
                            SortOrder = 18,
                            Title = "Phân quyền",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 27, 22, 489, DateTimeKind.Local).AddTicks(565),
                            Url = "/role"
                        });
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Module.ErrorLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsError")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Module.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.RoleMenu", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("MenuId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenus");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.UserMenu", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("MenuId")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.HasKey("AccountId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("UserMenus");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Users.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshTokenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RefreshTokenId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTable", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.BidaTableType", "BidaTableType")
                        .WithMany("BidaTables")
                        .HasForeignKey("BidaTableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidaTableType");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTableSession", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.BidaTable", "BidaTable")
                        .WithMany("BidaTableSessions")
                        .HasForeignKey("BidaTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidaTable");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Inventory", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.InventoryExport", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.Product", null)
                        .WithMany("InventoryExports")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.InventoryImport", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.Product", null)
                        .WithMany("InventoryImports")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Order", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.OrderHistory", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.ServiceSession", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Feature.BidaTableSession", "BidaTableSession")
                        .WithMany("ServiceSessions")
                        .HasForeignKey("BidaTableSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.Feature.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidaTableSession");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.GroupRole", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Group", "Group")
                        .WithMany("GroupRoles")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.Role", "Role")
                        .WithMany("GroupRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.GroupUser", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Users.Account", "Account")
                        .WithMany("GroupUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Menu", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Menu", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.RefreshToken", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Users.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.RoleMenu", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.UserMenu", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Users.Account", "Account")
                        .WithMany("UserMenus")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.Menu", "Menu")
                        .WithMany("UserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.UserSession", b =>
                {
                    b.HasOne("PingMeChat.CMS.Entities.Users.Account", "Account")
                        .WithMany("UserSessions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PingMeChat.CMS.Entities.RefreshToken", "RefreshToken")
                        .WithMany("UserSessions")
                        .HasForeignKey("RefreshTokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTable", b =>
                {
                    b.Navigation("BidaTableSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTableSession", b =>
                {
                    b.Navigation("ServiceSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.BidaTableType", b =>
                {
                    b.Navigation("BidaTables");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Feature.Product", b =>
                {
                    b.Navigation("InventoryExports");

                    b.Navigation("InventoryImports");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Group", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Menu", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleMenus");

                    b.Navigation("UserMenus");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.RefreshToken", b =>
                {
                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Role", b =>
                {
                    b.Navigation("GroupRoles");

                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("PingMeChat.CMS.Entities.Users.Account", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("UserMenus");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
